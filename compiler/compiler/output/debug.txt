
Lexer::Lexer(input/test.txt)
    words: 11254
    end word: -1
Lexer::next(): [#...]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [id] kkli [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] Lexer [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] Lexer [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] string [add]
Lexer::next(): [WS]
Lexer::next(): [id] sourceFile [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] sourceFile [add]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] ifstream [add]
Lexer::next(): [WS]
Lexer::next(): [id] inFile [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] sourceFile [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] inFile [add]
Lexer::next(): [WS]
Lexer::next(): [SHR]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] noskipws [add]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] char [add]
Lexer::next(): [WS]
Lexer::next(): [id] buff [add]
Lexer::next(): [LBRACK]
Lexer::next(): [dec] 1000000
Lexer::next(): [RBRACK]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] int [add]
Lexer::next(): [WS]
Lexer::next(): [id] i [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [NOT]
Lexer::next(): [id] inFile [add]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [id] inFile [add]
Lexer::next(): [WS]
Lexer::next(): [SHR]
Lexer::next(): [WS]
Lexer::next(): [id] buff [add]
Lexer::next(): [LBRACK]
Lexer::next(): [id] i [add]
Lexer::next(): [INC]
Lexer::next(): [RBRACK]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] source [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] move [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] buff [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] i [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] source [add]
Lexer::next(): [LBRACK]
Lexer::next(): [id] source [add]
Lexer::next(): [WS]
Lexer::next(): [id] size [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [RBRACK]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] index [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] line [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] column [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] to_string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] i [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] to_string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] source [add]
Lexer::next(): [LBRACK]
Lexer::next(): [id] source [add]
Lexer::next(): [WS]
Lexer::next(): [id] size [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [RBRACK]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] pair [add]
Lexer::next(): [LT]
Lexer::next(): [id] kkli [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] int [add]
Lexer::next(): [GT]
Lexer::next(): [WS]
Lexer::next(): [id] kkli [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] Lexer [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] next [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] int [add]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] char [add]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [INC]
Lexer::next(): [id] line [add]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] column [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] isAlpha [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] int [add]
Lexer::next(): [WS]
Lexer::next(): [id] begIndex [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] index [add]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] int [add]
Lexer::next(): [WS]
Lexer::next(): [id] hash [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] isAlpha [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] isNum [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] hash [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] hash [add]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 147
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] string [add]
Lexer::next(): [WS]
Lexer::next(): [id] name [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] source [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] begIndex [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] index [add]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [id] begIndex [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] auto [add]
Lexer::next(): [WS]
Lexer::next(): [id] info [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] table [add]
Lexer::next(): [WS]
Lexer::next(): [id] has [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] hash [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] name [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] info [add]
Lexer::next(): [WS]
Lexer::next(): [id] first [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] name [add]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] info [add]
Lexer::next(): [WS]
Lexer::next(): [id] second [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] name [add]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] table [add]
Lexer::next(): [WS]
Lexer::next(): [id] addToken [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] ID [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] name [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] hash [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] ID [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] isNum [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] isNum [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 10
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] to_string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] value [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] isNum [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 16
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [AND]
Lexer::next(): [WS]
Lexer::next(): [dec] 15
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [COND]
Lexer::next(): [WS]
Lexer::next(): [dec] 9
Lexer::next(): [WS]
Lexer::next(): [COLON]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] to_string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] value [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 8
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [id] std [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] to_string [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] value [add]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] NUM [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] true [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] break [add]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [id] break [add]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] DIV [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] throw [add]
Lexer::next(): [WS]
Lexer::next(): [id] new [add]
Lexer::next(): [WS]
Lexer::next(): [id] Error [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] throw [add]
Lexer::next(): [WS]
Lexer::next(): [id] new [add]
Lexer::next(): [WS]
Lexer::next(): [id] Error [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] throw [add]
Lexer::next(): [WS]
Lexer::next(): [id] new [add]
Lexer::next(): [WS]
Lexer::next(): [id] Error [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] NUM [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] reinterpret_cast [add]
Lexer::next(): [LT]
Lexer::next(): [id] int [add]
Lexer::next(): [GT]
Lexer::next(): [LPAREN]
Lexer::next(): [id] vm [add]
Lexer::next(): [WS]
Lexer::next(): [id] getNextDataPos [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] while [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [id] vm [add]
Lexer::next(): [WS]
Lexer::next(): [id] addData [add]
Lexer::next(): [LPAREN]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] throw [add]
Lexer::next(): [WS]
Lexer::next(): [id] new [add]
Lexer::next(): [WS]
Lexer::next(): [id] Error [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] vm [add]
Lexer::next(): [WS]
Lexer::next(): [id] addData [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] vm [add]
Lexer::next(): [WS]
Lexer::next(): [id] addData [add]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [id] eof [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] throw [add]
Lexer::next(): [WS]
Lexer::next(): [id] new [add]
Lexer::next(): [WS]
Lexer::next(): [id] Error [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] STRING [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [id] value [add]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] EQ [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] ASSIGN [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] INC [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] ADD [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] DEC [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] SUB [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] NE [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] NOT [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LE [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] SHL [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LT [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] GE [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] SHR [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] GT [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LOR [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] OR [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LAN [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] AND [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] XOR [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] MOD [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] MUL [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] COND [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] COMMA [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] COLON [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] SEMICON [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LPAREN [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] RPAREN [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LBRACK [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] RBRACK [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] LBRACE [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] RBRACE [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] else [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] if [add]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] Debug [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] output [add]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [id] curr [add]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [id] nextChar [add]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [id] return [add]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
Lexer::next(): [id] TokenType [add]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
Lexer::next(): [id] END [add]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
