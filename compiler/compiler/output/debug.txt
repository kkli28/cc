
Lexer::Lexer(input/test.txt)
    words: 11254
    end word: -1
Lexer::next(): [#...]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [//]
Lexer::next(): [\n]
SymbolTable::has(kkli)
Lexer::next(): [id] kkli [add]
SymbolTable::addToken(ID, kkli, 342216105
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(Lexer)
Lexer::next(): [id] Lexer [add]
SymbolTable::addToken(ID, Lexer, 1451813452
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(Lexer)
Lexer::next(): [id] Lexer [has]
Lexer::next(): [LPAREN]
SymbolTable::has(std)
Lexer::next(): [id] std [add]
SymbolTable::addToken(ID, std, 2502187
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(string)
Lexer::next(): [id] string [add]
SymbolTable::addToken(ID, string, -1683152555
Lexer::next(): [WS]
SymbolTable::has(sourceFile)
Lexer::next(): [id] sourceFile [add]
SymbolTable::addToken(ID, sourceFile, 528568107
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [add]
SymbolTable::addToken(ID, if, 15537
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_ACTIONS)
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [add]
SymbolTable::addToken(ID, OUTPUT_LEXER_ACTIONS, -436965340
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [add]
SymbolTable::addToken(ID, Debug, 2010716643
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [add]
SymbolTable::addToken(ID, output, -897733407
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(sourceFile)
Lexer::next(): [id] sourceFile [has]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(ifstream)
Lexer::next(): [id] ifstream [add]
SymbolTable::addToken(ID, ifstream, 580822377
Lexer::next(): [WS]
SymbolTable::has(inFile)
Lexer::next(): [id] inFile [add]
SymbolTable::addToken(ID, inFile, 450266437
Lexer::next(): [LPAREN]
SymbolTable::has(sourceFile)
Lexer::next(): [id] sourceFile [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(inFile)
Lexer::next(): [id] inFile [has]
Lexer::next(): [WS]
Lexer::next(): [SHR]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(noskipws)
Lexer::next(): [id] noskipws [add]
SymbolTable::addToken(ID, noskipws, 705218560
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(char)
Lexer::next(): [id] char [add]
SymbolTable::addToken(ID, char, 316737486
Lexer::next(): [WS]
SymbolTable::has(buff)
Lexer::next(): [id] buff [add]
SymbolTable::addToken(ID, buff, 313842603
Lexer::next(): [LBRACK]
Lexer::next(): [dec] 1000000
Lexer::next(): [RBRACK]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(int)
Lexer::next(): [id] int [add]
SymbolTable::addToken(ID, int, 2285231
Lexer::next(): [WS]
SymbolTable::has(i)
Lexer::next(): [id] i [add]
SymbolTable::addToken(ID, i, 105
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [add]
SymbolTable::addToken(ID, while, 64985305
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
Lexer::next(): [NOT]
SymbolTable::has(inFile)
Lexer::next(): [id] inFile [has]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [add]
SymbolTable::addToken(ID, eof, 2198928
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
SymbolTable::has(inFile)
Lexer::next(): [id] inFile [has]
Lexer::next(): [WS]
Lexer::next(): [SHR]
Lexer::next(): [WS]
SymbolTable::has(buff)
Lexer::next(): [id] buff [has]
Lexer::next(): [LBRACK]
SymbolTable::has(i)
Lexer::next(): [id] i [has]
Lexer::next(): [INC]
Lexer::next(): [RBRACK]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(source)
Lexer::next(): [id] source [add]
SymbolTable::addToken(ID, source, 286792767
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(move)
Lexer::next(): [id] move [add]
SymbolTable::addToken(ID, move, 348657053
Lexer::next(): [LPAREN]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(string)
Lexer::next(): [id] string [has]
Lexer::next(): [LPAREN]
SymbolTable::has(buff)
Lexer::next(): [id] buff [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(i)
Lexer::next(): [id] i [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(source)
Lexer::next(): [id] source [has]
Lexer::next(): [LBRACK]
SymbolTable::has(source)
Lexer::next(): [id] source [has]
Lexer::next(): [WS]
SymbolTable::has(size)
Lexer::next(): [id] size [add]
SymbolTable::addToken(ID, size, 367587125
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [RBRACK]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(index)
Lexer::next(): [id] index [add]
SymbolTable::addToken(ID, index, 2136585646
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(line)
Lexer::next(): [id] line [add]
SymbolTable::addToken(ID, line, 345349700
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(column)
Lexer::next(): [id] column [add]
SymbolTable::addToken(ID, column, 1506130030
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_ACTIONS)
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(to_string)
Lexer::next(): [id] to_string [add]
SymbolTable::addToken(ID, to_string, 2107622277
Lexer::next(): [LPAREN]
SymbolTable::has(i)
Lexer::next(): [id] i [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(to_string)
Lexer::next(): [id] to_string [has]
Lexer::next(): [LPAREN]
SymbolTable::has(source)
Lexer::next(): [id] source [has]
Lexer::next(): [LBRACK]
SymbolTable::has(source)
Lexer::next(): [id] source [has]
Lexer::next(): [WS]
SymbolTable::has(size)
Lexer::next(): [id] size [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [RBRACK]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [//]
Lexer::next(): [\n]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(pair)
Lexer::next(): [id] pair [add]
SymbolTable::addToken(ID, pair, 357882198
Lexer::next(): [LT]
SymbolTable::has(kkli)
Lexer::next(): [id] kkli [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [add]
SymbolTable::addToken(ID, TokenType, -752280341
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(int)
Lexer::next(): [id] int [has]
Lexer::next(): [GT]
Lexer::next(): [WS]
SymbolTable::has(kkli)
Lexer::next(): [id] kkli [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(Lexer)
Lexer::next(): [id] Lexer [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(next)
Lexer::next(): [id] next [add]
SymbolTable::addToken(ID, next, 351617795
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_ACTIONS)
Lexer::next(): [id] OUTPUT_LEXER_ACTIONS [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(int)
Lexer::next(): [id] int [has]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [add]
SymbolTable::addToken(ID, value, -424133087
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(char)
Lexer::next(): [id] char [has]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [add]
SymbolTable::addToken(ID, curr, 317020902
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [add]
SymbolTable::addToken(ID, nextChar, -1215059295
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [add]
SymbolTable::addToken(ID, OUTPUT_LEXER_FUNC_NEXT_DETAIL, 1750404891
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [INC]
SymbolTable::has(line)
Lexer::next(): [id] line [has]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(column)
Lexer::next(): [id] column [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [dec] 1
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [add]
SymbolTable::addToken(ID, else, 323179601
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(isAlpha)
Lexer::next(): [id] isAlpha [add]
SymbolTable::addToken(ID, isAlpha, -950427208
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(int)
Lexer::next(): [id] int [has]
Lexer::next(): [WS]
SymbolTable::has(begIndex)
Lexer::next(): [id] begIndex [add]
SymbolTable::addToken(ID, begIndex, 391943510
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(index)
Lexer::next(): [id] index [has]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(int)
Lexer::next(): [id] int [has]
Lexer::next(): [WS]
SymbolTable::has(hash)
Lexer::next(): [id] hash [add]
SymbolTable::addToken(ID, hash, 332471474
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [SEMICON]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(isAlpha)
Lexer::next(): [id] isAlpha [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(isNum)
Lexer::next(): [id] isNum [add]
SymbolTable::addToken(ID, isNum, -2142972092
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(hash)
Lexer::next(): [id] hash [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(hash)
Lexer::next(): [id] hash [has]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 147
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(string)
Lexer::next(): [id] string [has]
Lexer::next(): [WS]
SymbolTable::has(name)
Lexer::next(): [id] name [add]
SymbolTable::addToken(ID, name, 351529727
Lexer::next(): [LPAREN]
SymbolTable::has(source)
Lexer::next(): [id] source [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(begIndex)
Lexer::next(): [id] begIndex [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(index)
Lexer::next(): [id] index [has]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
SymbolTable::has(begIndex)
Lexer::next(): [id] begIndex [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(auto)
Lexer::next(): [id] auto [add]
SymbolTable::addToken(ID, auto, 310668147
Lexer::next(): [WS]
SymbolTable::has(info)
Lexer::next(): [id] info [add]
SymbolTable::addToken(ID, info, 335927010
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(table)
Lexer::next(): [id] table [add]
SymbolTable::addToken(ID, table, -1358248262
Lexer::next(): [WS]
SymbolTable::has(has)
Lexer::next(): [id] has [add]
SymbolTable::addToken(ID, has, 2261710
Lexer::next(): [LPAREN]
SymbolTable::has(hash)
Lexer::next(): [id] hash [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(name)
Lexer::next(): [id] name [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(info)
Lexer::next(): [id] info [has]
Lexer::next(): [WS]
SymbolTable::has(first)
Lexer::next(): [id] first [add]
SymbolTable::addToken(ID, first, 720160968
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(name)
Lexer::next(): [id] name [has]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [add]
SymbolTable::addToken(ID, return, -12847000
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(info)
Lexer::next(): [id] info [has]
Lexer::next(): [WS]
SymbolTable::has(second)
Lexer::next(): [id] second [add]
SymbolTable::addToken(ID, second, -144969372
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(name)
Lexer::next(): [id] name [has]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(table)
Lexer::next(): [id] table [has]
Lexer::next(): [WS]
SymbolTable::has(addToken)
Lexer::next(): [id] addToken [add]
SymbolTable::addToken(ID, addToken, 1735811572
Lexer::next(): [LPAREN]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(ID)
Lexer::next(): [id] ID [add]
SymbolTable::addToken(ID, ID, 10799
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(name)
Lexer::next(): [id] name [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(hash)
Lexer::next(): [id] hash [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(ID)
Lexer::next(): [id] ID [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(isNum)
Lexer::next(): [id] isNum [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(isNum)
Lexer::next(): [id] isNum [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 10
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(to_string)
Lexer::next(): [id] to_string [has]
Lexer::next(): [LPAREN]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(isNum)
Lexer::next(): [id] isNum [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 16
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [AND]
Lexer::next(): [WS]
Lexer::next(): [dec] 15
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [COND]
Lexer::next(): [WS]
Lexer::next(): [dec] 9
Lexer::next(): [WS]
Lexer::next(): [COLON]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(to_string)
Lexer::next(): [id] to_string [has]
Lexer::next(): [LPAREN]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [GE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [LE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [MUL]
Lexer::next(): [WS]
Lexer::next(): [dec] 8
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [SUB]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [WS]
Lexer::next(): [ADD]
Lexer::next(): [WS]
SymbolTable::has(std)
Lexer::next(): [id] std [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(to_string)
Lexer::next(): [id] to_string [has]
Lexer::next(): [LPAREN]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(NUM)
Lexer::next(): [id] NUM [add]
SymbolTable::addToken(ID, NUM, 1698074
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(true)
Lexer::next(): [id] true [add]
SymbolTable::addToken(ID, true, 370957394
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(break)
Lexer::next(): [id] break [add]
SymbolTable::addToken(ID, break, -1119329421
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
SymbolTable::has(break)
Lexer::next(): [id] break [has]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(DIV)
Lexer::next(): [id] DIV [add]
SymbolTable::addToken(ID, DIV, 1480229
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(throw)
Lexer::next(): [id] throw [add]
SymbolTable::addToken(ID, throw, -1335666398
Lexer::next(): [WS]
SymbolTable::has(new)
Lexer::next(): [id] new [add]
SymbolTable::addToken(ID, new, 2391956
Lexer::next(): [WS]
SymbolTable::has(Error)
Lexer::next(): [id] Error [add]
SymbolTable::addToken(ID, Error, -1775662100
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(throw)
Lexer::next(): [id] throw [has]
Lexer::next(): [WS]
SymbolTable::has(new)
Lexer::next(): [id] new [has]
Lexer::next(): [WS]
SymbolTable::has(Error)
Lexer::next(): [id] Error [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [WS]
Lexer::next(): [LOR]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(throw)
Lexer::next(): [id] throw [has]
Lexer::next(): [WS]
SymbolTable::has(new)
Lexer::next(): [id] new [has]
Lexer::next(): [WS]
SymbolTable::has(Error)
Lexer::next(): [id] Error [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(NUM)
Lexer::next(): [id] NUM [has]
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(reinterpret_cast)
Lexer::next(): [id] reinterpret_cast [add]
SymbolTable::addToken(ID, reinterpret_cast, 824804848
Lexer::next(): [LT]
SymbolTable::has(int)
Lexer::next(): [id] int [has]
Lexer::next(): [GT]
Lexer::next(): [LPAREN]
SymbolTable::has(vm)
Lexer::next(): [id] vm [add]
SymbolTable::addToken(ID, vm, 17455
Lexer::next(): [WS]
SymbolTable::has(getNextDataPos)
Lexer::next(): [id] getNextDataPos [add]
SymbolTable::addToken(ID, getNextDataPos, 1173780445
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(while)
Lexer::next(): [id] while [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [WS]
Lexer::next(): [LAN]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [NE]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
SymbolTable::has(vm)
Lexer::next(): [id] vm [has]
Lexer::next(): [WS]
SymbolTable::has(addData)
Lexer::next(): [id] addData [add]
SymbolTable::addToken(ID, addData, 778771675
Lexer::next(): [LPAREN]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(throw)
Lexer::next(): [id] throw [has]
Lexer::next(): [WS]
SymbolTable::has(new)
Lexer::next(): [id] new [has]
Lexer::next(): [WS]
SymbolTable::has(Error)
Lexer::next(): [id] Error [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(vm)
Lexer::next(): [id] vm [has]
Lexer::next(): [WS]
SymbolTable::has(addData)
Lexer::next(): [id] addData [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(vm)
Lexer::next(): [id] vm [has]
Lexer::next(): [WS]
SymbolTable::has(addData)
Lexer::next(): [id] addData [has]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
SymbolTable::has(eof)
Lexer::next(): [id] eof [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(throw)
Lexer::next(): [id] throw [has]
Lexer::next(): [WS]
SymbolTable::has(new)
Lexer::next(): [id] new [has]
Lexer::next(): [WS]
SymbolTable::has(Error)
Lexer::next(): [id] Error [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(STRING)
Lexer::next(): [id] STRING [add]
SymbolTable::addToken(ID, STRING, -1347240491
Lexer::next(): [COMMA]
Lexer::next(): [WS]
SymbolTable::has(value)
Lexer::next(): [id] value [has]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(EQ)
Lexer::next(): [id] EQ [add]
SymbolTable::addToken(ID, EQ, 10224
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(ASSIGN)
Lexer::next(): [id] ASSIGN [add]
SymbolTable::addToken(ID, ASSIGN, -407171749
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(INC)
Lexer::next(): [id] INC [add]
SymbolTable::addToken(ID, INC, 1588990
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(ADD)
Lexer::next(): [id] ADD [add]
SymbolTable::addToken(ID, ADD, 1414649
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(DEC)
Lexer::next(): [id] DEC [add]
SymbolTable::addToken(ID, DEC, 1479622
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(SUB)
Lexer::next(): [id] SUB [add]
SymbolTable::addToken(ID, SUB, 1806108
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(NE)
Lexer::next(): [id] NE [add]
SymbolTable::addToken(ID, NE, 11535
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(NOT)
Lexer::next(): [id] NOT [add]
SymbolTable::addToken(ID, NOT, 1697199
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LE)
Lexer::next(): [id] LE [add]
SymbolTable::addToken(ID, LE, 11241
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(SHL)
Lexer::next(): [id] SHL [add]
SymbolTable::addToken(ID, SHL, 1804207
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LT)
Lexer::next(): [id] LT [add]
SymbolTable::addToken(ID, LT, 11256
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(GE)
Lexer::next(): [id] GE [add]
SymbolTable::addToken(ID, GE, 10506
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(SHR)
Lexer::next(): [id] SHR [add]
SymbolTable::addToken(ID, SHR, 1804213
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(GT)
Lexer::next(): [id] GT [add]
SymbolTable::addToken(ID, GT, 10521
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LOR)
Lexer::next(): [id] LOR [add]
SymbolTable::addToken(ID, LOR, 1653979
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(OR)
Lexer::next(): [id] OR [add]
SymbolTable::addToken(ID, OR, 11695
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LAN)
Lexer::next(): [id] LAN [add]
SymbolTable::addToken(ID, LAN, 1651917
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(AND)
Lexer::next(): [id] AND [add]
SymbolTable::addToken(ID, AND, 1416119
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(XOR)
Lexer::next(): [id] XOR [add]
SymbolTable::addToken(ID, XOR, 1913287
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(MOD)
Lexer::next(): [id] MOD [add]
SymbolTable::addToken(ID, MOD, 1675574
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(MUL)
Lexer::next(): [id] MUL [add]
SymbolTable::addToken(ID, MUL, 1676464
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(COND)
Lexer::next(): [id] COND [add]
SymbolTable::addToken(ID, COND, 214545686
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(COMMA)
Lexer::next(): [id] COMMA [add]
SymbolTable::addToken(ID, COMMA, 1473424549
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(COLON)
Lexer::next(): [id] COLON [add]
SymbolTable::addToken(ID, COLON, 1473403247
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(SEMICON)
Lexer::next(): [id] SEMICON [add]
SymbolTable::addToken(ID, SEMICON, -1640968976
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LPAREN)
Lexer::next(): [id] LPAREN [add]
SymbolTable::addToken(ID, LPAREN, 1572062158
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(RPAREN)
Lexer::next(): [id] RPAREN [add]
SymbolTable::addToken(ID, RPAREN, 1104114784
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LBRACK)
Lexer::next(): [id] LBRACK [add]
SymbolTable::addToken(ID, LBRACK, -616621639
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(RBRACK)
Lexer::next(): [id] RBRACK [add]
SymbolTable::addToken(ID, RBRACK, -1084569013
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(LBRACE)
Lexer::next(): [id] LBRACE [add]
SymbolTable::addToken(ID, LBRACE, -616621645
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [EQ]
Lexer::next(): [WS]
Lexer::next(): [char]
Lexer::next(): [RPAREN]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(RBRACE)
Lexer::next(): [id] RBRACE [add]
SymbolTable::addToken(ID, RBRACE, -1084569019
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(else)
Lexer::next(): [id] else [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(if)
Lexer::next(): [id] if [has]
Lexer::next(): [WS]
Lexer::next(): [LPAREN]
SymbolTable::has(OUTPUT_LEXER_FUNC_NEXT_DETAIL)
Lexer::next(): [id] OUTPUT_LEXER_FUNC_NEXT_DETAIL [has]
Lexer::next(): [RPAREN]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(Debug)
Lexer::next(): [id] Debug [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(output)
Lexer::next(): [id] output [has]
Lexer::next(): [LPAREN]
Lexer::next(): [string]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [WS]
SymbolTable::has(curr)
Lexer::next(): [id] curr [has]
Lexer::next(): [WS]
Lexer::next(): [ASSIGN]
Lexer::next(): [WS]
SymbolTable::has(nextChar)
Lexer::next(): [id] nextChar [has]
Lexer::next(): [LPAREN]
Lexer::next(): [RPAREN]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
Lexer::next(): [\n]
Lexer::next(): [WS]
Lexer::next(): [//]
Lexer::next(): [\n]
Lexer::next(): [WS]
SymbolTable::has(return)
Lexer::next(): [id] return [has]
Lexer::next(): [WS]
Lexer::next(): [LBRACE]
Lexer::next(): [WS]
SymbolTable::has(TokenType)
Lexer::next(): [id] TokenType [has]
Lexer::next(): [COLON]
Lexer::next(): [COLON]
SymbolTable::has(END)
Lexer::next(): [id] END [add]
SymbolTable::addToken(ID, END, 1502555
Lexer::next(): [COMMA]
Lexer::next(): [WS]
Lexer::next(): [oct] 0
Lexer::next(): [WS]
Lexer::next(): [RBRACE]
Lexer::next(): [SEMICON]
Lexer::next(): [\n]
Lexer::next(): [RBRACE]
Lexer::next(): [\n]
